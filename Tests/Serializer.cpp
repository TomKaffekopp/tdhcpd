/*
 * TDHCPD - A Dynamic Host Configuration Protocol (DHCP) server
 * Copyright (C) 2024  Tom-Andre Barstad.
 * This software is licensed under the Software Attribution License.
 * See LICENSE for more information.
*/

#include "Serializer.h"
#include "Structures.h"
#include "IpConverter.h"

#include <gtest/gtest.h>

TEST(Serializer, Serialize)
{
    BOOTP bootp;
    bootp.operation = BOOTP_Request;
    bootp.hardwareType = 1;
    bootp.hardwareAddressLength = 6;
    bootp.hops = 0;
    bootp.transactionId = 0x8DA13D88;
    bootp.secondsElapsed = 0;
    bootp.flags = 0;
    bootp.ciaddr = 0;
    bootp.yiaddr = 0;
    bootp.siaddr = 0;
    bootp.giaddr = 0;
    bootp.chaddr = 0x8A31790CFCF8;

    bootp.options[Option_MessageType] = std::make_unique<DHCPMessageTypeBOOTPOption>(DHCP_Discover);
    bootp.options[Option_ServerIdentifier] = std::make_unique<IntegerBOOTPOption<std::uint32_t>>(concatenateIpAddress(127,0,0,1));

    {
        // TODO these aren't checked for yet.
        std::vector<BOOTPOptionKey> params = {
            Option_SubnetMask,
            Option_Router,
            Option_DomainNameServer,
            Option_BroadcastAddress,
            Option_IPLeaseTime,
            Option_ServerIdentifier
        };
        bootp.options[Option_ParameterRequestList] = std::make_unique<ParameterListBOOTPOption>(std::move(params));
    }

    auto data = serializeBootp(bootp);

    deserializeBootp(data, bootp);

    std::uint32_t xid = data[4];
    xid <<= 8;
    xid |= data[5];
    xid <<= 8;
    xid |= data[6];
    xid <<= 8;
    xid |= data[7];
    EXPECT_EQ(0x8DA13D88, xid);

    std::uint64_t chaddr = data[28];
    chaddr <<= 8;
    chaddr |= data[29];
    chaddr <<= 8;
    chaddr |= data[30];
    chaddr <<= 8;
    chaddr |= data[31];
    chaddr <<= 8;
    chaddr |= data[32];
    chaddr <<= 8;
    chaddr |= data[33];
    EXPECT_EQ(0x8A31790CFCF8, chaddr);

    std::uint32_t magic = data[236];
    magic <<= 8;
    magic |= data[237];
    magic <<= 8;
    magic |= data[238];
    magic <<= 8;
    magic |= data[239];
    EXPECT_EQ(0x63825363, magic);
}

TEST(Serializer, Deserialize)
{
    std::vector<std::uint8_t> data = {
        0x01, 0x01, 0x06, 0x00, 0x8d, 0xa1, 0x3d, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8a, 0x31, 0x79, 0x0c,
        0xfc, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x82, 0x53, 0x63,
        0x35, 0x01, 0x01, 0x37, 0x0e, 0x01, 0x79, 0x03, 0x06, 0x0c, 0x0f, 0x1a, 0x1c, 0x21, 0x33, 0x36,
        0x3a, 0x3b, 0x77, 0x39, 0x02, 0x05, 0xc0, 0x3d, 0x13, 0xff, 0x79, 0x0c, 0xfc, 0xf8, 0x00, 0x01,
        0x00, 0x01, 0x2c, 0x75, 0x9f, 0x4a, 0x8a, 0x31, 0x79, 0x0c, 0xfc, 0xf8, 0x50, 0x00, 0x74, 0x01,
        0x01, 0x91, 0x01, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    BOOTP bootp;
    auto ok = deserializeBootp(data, bootp);
    ASSERT_TRUE(ok);

    EXPECT_EQ(0x8DA13D88, bootp.transactionId);
    EXPECT_EQ(0x8A31790CFCF8, bootp.chaddr);
    EXPECT_EQ(0x63825363, bootp.magic);
}
